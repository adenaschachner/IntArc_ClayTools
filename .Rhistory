library(ggpubr)
library(pbapply)
dat <- read.csv("IntArch_TestData.csv", stringsAsFactors = F)
#Filter out data to be excluded:
# #Memory check questions:
# ##Star box
#
# dat %>%
#   filter(MemCheck_RodStar == "Star rod") %>%
#   filter(MemCheck_RodCir == "All of the rod pieces") %>%
#   filter(MemCheck_HanCir == "All of the handle pieces") %>%
#   filter(MemCheck_HanStar == "All of the handle pieces")
#
# #Score the lextale
# dat %>%
#   mutate(score = (((apply(dat %>%
#   select(ends_with(match = "_Y")), 1, function(x) sum(x=="Yes, this is English")))/20*100) + ((apply(dat %>%
#   select(ends_with(match = "_N")), 1, function(x) sum(x=="No, this is not English")))/10*100))/2)
#
# ##Completion time
# dat$`timing_Page,Submit` <- as.numeric(as.character(dat$`timing_Page,Submit`))
#
# mean(as.numeric(as.character(dat$`timing_Page,Submit`)))
# sd(as.numeric(as.character(dat$`timing_Page,Submit`)))*2
#
# dat %>%
#   filter(`timing_Page,Submit` <= (mean(dat$`timing_Page,Submit`) + sd(dat$`timing_Page,Submit`)))
# remove extra qualtrics headers, and columns that are non-data (dates, times, etc)
dat <- dat[-(1:2),-(1:18)]
# make the column names more meaningful
names(dat) <- gsub("HId", "Iden", names(dat))
names(dat) <- gsub("RId", "Iden", names(dat))
names(dat) <- gsub("HDi", "Dif", names(dat))
names(dat) <- gsub("RDi", "Dif", names(dat))
names(dat) <- gsub("[.]", ",", names(dat))
# ethan can you add a comment to help me understand this line?
dat.copy <- dat %>%
select(-c(grep("Ha", names(dat)), grep("Ro", names(dat)), grep("Bo", names(dat)), ends_with(match = "H", vars = names(dat)), ends_with(match = "R", vars = names(dat)), ends_with(match = "B", vars = names(dat)))) %>%
select(1:24)
dat.copy <- cbind(PID = 1:nrow(dat.copy), dat.copy)
dat.copy2 = dat.copy %>%
gather(condition, Result,-PID) %>%
separate(condition, c('Box', 'HandleSimilarity', 'RodSimilarity', 'HandleChoices', 'RodChoices'),',') %>%
mutate(HandleChoices = as.numeric(HandleChoices),
RodChoices = as.numeric(RodChoices),
Box <- as.factor(Box)) %>%
filter(Result != "")
dat.copy2$HandleSimilarity
s.factor(dat.copy2$HandleSimilarity)
as.factor(dat.copy2$HandleSimilarity)
dat.copy2$HandleSimilarity == Iden
dat.copy2$HandleSimilarity == 'Iden'
dat.copy2$HandleSimilarity <- dat.copy2$HandleSimilarity == 'Iden'
dat.copy2$HandleSimilarity
typeof(dat.copy2$HandleSimilarity)
dat.copy2$Result
```{r tidy the data}
dat.copy2 <- dat.copy %>%
gather(condition, Result,-PID) %>%
separate(condition, c('Box', 'HandleSimilarity', 'RodSimilarity', 'HandleChoices', 'RodChoices'),',') %>%
mutate(HandleChoices <- as.numeric(HandleChoices),
RodChoices <- as.numeric(RodChoices),
Box <- as.factor(Box),
HandleSimilarity <- HandleSimilarity == 'Iden',
RodSimilarity <- dat.copy2$RodSimilarity == 'Iden') %>%
filter(Result != "")
dat.copy2 <- dat.copy %>%
gather(condition, Result,-PID) %>%
separate(condition, c('Box', 'HandleSimilarity', 'RodSimilarity', 'HandleChoices', 'RodChoices'),',') %>%
mutate(HandleChoices <- as.numeric(HandleChoices),
RodChoices <- as.numeric(RodChoices),
Box <- as.factor(Box),
HandleSimilarity <- HandleSimilarity == 'Iden',
RodSimilarity <- RodSimilarity == 'Iden') %>%
filter(Result != "")
?mutate
dat.copy2 <- dat.copy %>%
gather(condition, Result,-PID) %>%
separate(condition, c('Box', 'HandleSimilarity', 'RodSimilarity', 'HandleChoices', 'RodChoices'),',') %>%
mutate(HandleChoices <- as.numeric(HandleChoices),
RodChoices <- as.numeric(RodChoices),
Box <- as.factor(Box),
HandleSimilarity <- HandleSimilarity == 'Iden',
RodSimilarity <- RodSimilarity == 'Iden',
JudgedCopied <- Result == 'Someone copied.') %>%
filter(Result != "")
head(dat.copy2)
dat.copy2 <- dat.copy %>%
gather(condition, Result,-PID) %>%
separate(condition, c('Box', 'HandleSimilarity', 'RodSimilarity', 'HandleChoices', 'RodChoices'),',') %>%
mutate(HandleChoices = as.numeric(HandleChoices),
RodChoices = as.numeric(RodChoices),
Box = as.factor(Box),
HandleSimilarity = HandleSimilarity == 'Iden',
RodSimilarity = RodSimilarity == 'Iden',
JudgedCopied = Result == 'Someone copied.') %>%
filter(Result != "")
head(dat.copy2)
library(tidyverse)
library(stats4)
library(papaja)
library(ggpmisc)
library(ggpubr)
library(pbapply)
dat <- read.csv("IntArch_TestData.csv", stringsAsFactors = F)
#Filter out data to be excluded:
# #Memory check questions:
# ##Star box
#
# dat %>%
#   filter(MemCheck_RodStar == "Star rod") %>%
#   filter(MemCheck_RodCir == "All of the rod pieces") %>%
#   filter(MemCheck_HanCir == "All of the handle pieces") %>%
#   filter(MemCheck_HanStar == "All of the handle pieces")
#
# #Score the lextale
# dat %>%
#   mutate(score = (((apply(dat %>%
#   select(ends_with(match = "_Y")), 1, function(x) sum(x=="Yes, this is English")))/20*100) + ((apply(dat %>%
#   select(ends_with(match = "_N")), 1, function(x) sum(x=="No, this is not English")))/10*100))/2)
#
# ##Completion time
# dat$`timing_Page,Submit` <- as.numeric(as.character(dat$`timing_Page,Submit`))
#
# mean(as.numeric(as.character(dat$`timing_Page,Submit`)))
# sd(as.numeric(as.character(dat$`timing_Page,Submit`)))*2
#
# dat %>%
#   filter(`timing_Page,Submit` <= (mean(dat$`timing_Page,Submit`) + sd(dat$`timing_Page,Submit`)))
# remove extra qualtrics headers, and columns that are non-data (dates, times, etc)
dat <- dat[-(1:2),-(1:18)]
# make the column names more meaningful
names(dat) <- gsub("HId", "Iden", names(dat))
names(dat) <- gsub("RId", "Iden", names(dat))
names(dat) <- gsub("HDi", "Dif", names(dat))
names(dat) <- gsub("RDi", "Dif", names(dat))
names(dat) <- gsub("[.]", ",", names(dat))
# removes the memory check questions from the dataset
dat.copy <- dat %>%
select(-c(grep("Ha", names(dat)), grep("Ro", names(dat)), grep("Bo", names(dat)), ends_with(match = "H", vars = names(dat)), ends_with(match = "R", vars = names(dat)), ends_with(match = "B", vars = names(dat)))) %>%
select(1:24)
dat.copy <- cbind(PID = 1:nrow(dat.copy), dat.copy)
dat.copy2 <- dat.copy %>%
gather(condition, Result,-PID) %>%
separate(condition, c('Box', 'HandleSimilarity', 'RodSimilarity', 'HandleChoices', 'RodChoices'),',') %>%
mutate(HandleChoices = as.numeric(HandleChoices),
RodChoices = as.numeric(RodChoices),
Box = as.factor(Box),
HandleSimilarity = HandleSimilarity == 'Iden',
RodSimilarity = RodSimilarity == 'Iden',
JudgedCopied = Result == 'Someone copied.') %>%
filter(Result != "")
model.full = function(Box, HandleSimilarity, RodSimilarity, HandleChoices, RodChoices, priorCopy, Response){
# Take into account the physical constraints of the box - for StarBox, there's only 1 option that works.
if(Box == 'Star'){
RodChoices <- 1
}
# Error parameter: If you are trying to copy, how likely is it that you make a mistake and choose a different piece?
# TO DO: how to set this param? MLE too?
errorRate <- .03
# in this scheme, RodIsDiff and HandleIsDiff are logicals (0/1, or T/F)
likelihoodIfCopyingHandleOnly <- ((RodIsDiff)     * ((RodChoices-1)/RodChoices) + # if rod is different
(1-RodIsDiff)   * (1/RodChoices)) *             # if rod is the same
((HandleIsDiff)  * errorRate +                   # if handle is different
(1-HandleIsDiff)* (1-errorRate))                # if handle is the same
likelihoodIfCopyingRodOnly <-   ((RodIsDiff)      * errorRate +
(1-RodIsDiff)    * (1-errorRate)) *
((HandleIsDiff)   * ((HandleChoices-1)/HandleChoices) +
(1-HandleIsDiff) * (1/HandleChoices))
likelihoodIfCopyingAll <-       ((RodIsDiff)      * errorRate +
(1-RodIsDiff)    * (1-errorRate)) *
((HandleIsDiff)   * errorRate +
(1-HandleIsDiff) * (1-errorRate))
likelihoodIfNoCopying <-        ((RodIsDiff)      * ((RodChoices-1)/RodChoices) +
(1-RodIsDiff)    * (1/RodChoices)) *
((HandleIsDiff)   * ((HandleChoices-1)/HandleChoices) +
(1-HandleIsDiff) * (1/HandleChoices))
# rod, then handle
# change dot notation to camel case
adjusted.likelihoodIfCopyingAll        <- priorCopy     * priorCopy     * likelihoodIfCopyingAll
adjusted.likelihoodIfCopyingHandleOnly <- (1-priorCopy) * priorCopy     * likelihoodIfCopyingHandleOnly
adjusted.likelihoodIfCopyingRodOnly    <- priorCopy     * (1-priorCopy) * likelihoodIfCopyingRodOnly
adjusted.likelihoodIfNoCopying         <- (1-priorCopy) * (1-priorCopy) * likelihoodIfNoCopying
sum.adjusted.likeCopy <- adjusted.likelihoodIfCopyingAll +
adjusted.likelihoodIfCopyingHandleOnly +
adjusted.likelihoodIfCopyingRodOnly
posterior.copying <- sum.adjusted.likeCopy          / (adjusted.likelihoodIfNoCopying + sum.adjusted.likeCopy)
posterior.indep   <- adjusted.likelihoodIfNoCopying / (adjusted.likelihoodIfNoCopying + sum.adjusted.likeCopy)
if(Response == "Someone copied."){
return(posterior.copying)
} else {
return(posterior.indep)
}
}
model.ISC = function(Box, HandleSimilarity, RodSimilarity, HandleChoices, RodChoices, priorCopy, Response){
if(HandleSimilarity == 'Dif' & RodSimilarity == 'Dif'){
likelihoodIfCopyingAll <- 0.00000000001
likelihoodIfCopyingHandleOnly <- 0.00000000001
likelihoodIfCopyingRodOnly <- 0.00000000001
likelihoodIndep <- ((RodChoices-1)/RodChoices) * ((HandleChoices-1)/HandleChoices)
} else if(HandleSimilarity == 'Dif' & RodSimilarity == 'Iden'){
likelihoodIfCopyingAll <- 0.00000000001
likelihoodIfCopyingHandleOnly <- 0.00000000001
likelihoodIfCopyingRodOnly <- 1 * ((HandleChoices-1)/HandleChoices)
likelihoodIndep <- (1/RodChoices) * ((HandleChoices-1)/HandleChoices)
} else if(HandleSimilarity == 'Iden' & RodSimilarity == 'Dif'){
likelihoodIfCopyingAll <- 0.00000000001
likelihoodIfCopyingHandleOnly <- ((RodChoices-1)/RodChoices) * 1
likelihoodIfCopyingRodOnly <- 0.00000000001
likelihoodIndep <- ((RodChoices-1)/RodChoices) * (1/HandleChoices)
} else if(HandleSimilarity == 'Iden' & RodSimilarity == 'Iden'){
likelihoodIfCopyingAll <- 1
likelihoodIfCopyingHandleOnly <- (1/RodChoices) * 1
likelihoodIfCopyingRodOnly <- 1 * (1/HandleChoices)
likelihoodIndep <- (1/RodChoices) * (1/HandleChoices)
}
adjusted.likelihoodIfCopyingAll <- priorCopy * priorCopy * likelihoodIfCopyingAll
adjusted.likelihoodIfCopyingHandleOnly <- (1 - priorCopy) * priorCopy * likelihoodIfCopyingHandleOnly
adjusted.likelihoodIfCopyingRodOnly <- priorCopy * (1 - priorCopy) * likelihoodIfCopyingRodOnly
adjusted.likelihoodIndep <- (1 - priorCopy) * (1 - priorCopy) * likelihoodIndep
sum.adjusted.likeCopy <- adjusted.likelihoodIfCopyingAll + adjusted.likelihoodIfCopyingHandleOnly + adjusted.likelihoodIfCopyingRodOnly
posterior.copying <- sum.adjusted.likeCopy / (adjusted.likelihoodIndep + sum.adjusted.likeCopy)
posterior.indep <- adjusted.likelihoodIndep / (adjusted.likelihoodIndep + sum.adjusted.likeCopy)
if(Response == "Someone copied."){
return(posterior.copying)
} else {
return(posterior.indep)
}
}
copy.llh.full = function(priorCopy){
tempData = dat.copy2 %>%
rowwise() %>%
mutate(pred = model.full(Box, HandleSimilarity, RodSimilarity, HandleChoices, RodChoices, priorCopy, Result))
-sum(log(tempData$pred))
}
#cannot use 0 and 1 because it will result in (NaN)
lwrs.full = c(0.000000001)
uprs.full = c(0.999999999)
inits.full = list(priorCopy = mean(dat.copy2$Result == "Someone copied."))
fit.full <- mle(copy.llh.full, start = inits.full, lower = lwrs.full, upper = uprs.full, method = 'L-BFGS-B')
head(data.copy2$HandleSimilarity)
head(dat.copy2$HandleSimilarity)
head(dat$HandleSimilarity)
library(tidyverse)
library(stats4)
library(papaja)
library(ggpmisc)
library(ggpubr)
library(pbapply)
# --- Parameters: ---
# --- Trial information:
# Box - which puzzle box (Star, Circle)
Box <- 'Star'
# HandleIsDiff - 0 = handles are identical; 1 = handles are different
HandleIsDiff <- 0
# RodIsDiff - 0 = rods are identical; 1 = rods are different
RodIsDiff <- 1
# NumRodChoices - 2 or 10 options to choose from
NumRodChoices <- 10
# NumHandleChoices - 2 or 10 options to choose from
NumHandleChoices <- 2
# Response (someone copied; or made independently, without copying)
Response <- "Someone copied."
# --- These will be set using MLE; here are sample values for comprehension purposes only
# priorCopy - prior on copying
priorCopy <- .15
# errorRate - If you are trying to copy, how likely is it that you make a mistake and choose a different piece?
errorRate <- .03
# nChoices - for model that ignores number of options (for rod/handles pieces), how many options does it assume were available?
nChoices <- 10
#Full model- takes into account constraints of the puzzle box, as well as number of available choices to build with
posteriorFullModel <- ModelFull(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate)
# Ethan - can you check which if any of these we are actually using in this subset of the code? and get rid of the unnecessary ones?
library(tidyverse)
library(stats4)
library(papaja)
library(ggpmisc)
library(ggpubr)
library(pbapply)
# --- Parameters: ---
# --- Trial information:
# Box - which puzzle box (Star, Circle)
Box <- 'Star'
# HandleIsDiff - 0 = handles are identical; 1 = handles are different
HandleIsDiff <- 0
# RodIsDiff - 0 = rods are identical; 1 = rods are different
RodIsDiff <- 1
# NumRodChoices - 2 or 10 options to choose from
NumRodChoices <- 10
# NumHandleChoices - 2 or 10 options to choose from
NumHandleChoices <- 2
# Response (someone copied; or made independently, without copying)
Response <- "Someone copied."
# --- These will be set using MLE; here are sample values for comprehension purposes only
# priorCopy - prior on copying
priorCopy <- .15
# errorRate - If you are trying to copy, how likely is it that you make a mistake and choose a different piece?
errorRate <- .03
# nChoices - for model that ignores number of options (for rod/handles pieces), how many options does it assume were available?
nChoices <- 10
ModelBase = function(Box, HandleIsDiff, RodIsDiff, NumNumHandleChoices, NumNumRodChoices, priorCopy, Response, errorRate){
# RodIsDiff and HandleIsDiff are logicals (0/1, or T/F)
likelihoodIfCopyingHandleOnly <- ((RodIsDiff)     * ((NumRodChoices-1)/NumRodChoices) + # if rod is different
(1-RodIsDiff)   * (1/NumRodChoices)) *             # if rod is the same
((HandleIsDiff)  * errorRate +                   # if handle is different
(1-HandleIsDiff)* (1-errorRate))                # if handle is the same
likelihoodIfCopyingRodOnly <-   ((RodIsDiff)      * errorRate +
(1-RodIsDiff)    * (1-errorRate)) *
((HandleIsDiff)   * ((NumHandleChoices-1)/NumHandleChoices) +
(1-HandleIsDiff) * (1/NumHandleChoices))
likelihoodIfCopyingAll <-       ((RodIsDiff)      * errorRate +
(1-RodIsDiff)    * (1-errorRate)) *
((HandleIsDiff)   * errorRate +
(1-HandleIsDiff) * (1-errorRate))
likelihoodIfNoCopying <-        ((RodIsDiff)      * ((NumRodChoices-1)/NumRodChoices) +
(1-RodIsDiff)    * (1/NumRodChoices)) *
((HandleIsDiff)   * ((NumHandleChoices-1)/NumHandleChoices) +
(1-HandleIsDiff) * (1/NumHandleChoices))
# priors here are specified as rod, then handle
AdjustedLikelihoodIfCopyingAll        <- priorCopy     * priorCopy     * likelihoodIfCopyingAll
AdjustedLikelihoodIfCopyingHandleOnly <- (1-priorCopy) * priorCopy     * likelihoodIfCopyingHandleOnly
AdjustedLikelihoodIfCopyingRodOnly    <- priorCopy     * (1-priorCopy) * likelihoodIfCopyingRodOnly
AdjustedLikelihoodIfNoCopying         <- (1-priorCopy) * (1-priorCopy) * likelihoodIfNoCopying
SumAdjustedLikeCopy <- AdjustedLikelihoodIfCopyingAll +
AdjustedLikelihoodIfCopyingHandleOnly +
AdjustedLikelihoodIfCopyingRodOnly
PosteriorCopying <- SumAdjustedLikeCopy / (AdjustedLikelihoodIfNoCopying + SumAdjustedLikeCopy)
PosteriorNoCopying <- AdjustedLikelihoodIfNoCopying / (AdjustedLikelihoodIfNoCopying + SumAdjustedLikeCopy)
if(Response == "Someone copied."){
return(PosteriorCopying)
} else {
return(PosteriorNoCopying)
}
}
ModelFull = function(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate){
# Take into account the physical constraints of the box: For StarBox, there's only 1 rod option that works. (All handle options always work, on both boxes. For circle box, all rod options work.)
if(Box == 'Star'){
NumRodChoices <- 1
}
ModelBase(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate)
}
posteriorFullModel
posteriorFullModel <- ModelFull(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate)
numRodChoices
# --- Parameters: ---
# --- Trial information:
# Box - which puzzle box (Star, Circle)
Box <- 'Star'
# HandleIsDiff - 0 = handles are identical; 1 = handles are different
HandleIsDiff <- 0
# RodIsDiff - 0 = rods are identical; 1 = rods are different
RodIsDiff <- 1
# NumRodChoices - 2 or 10 options to choose from
NumRodChoices <- 10
# NumHandleChoices - 2 or 10 options to choose from
NumHandleChoices <- 2
# Response (someone copied; or made independently, without copying)
Response <- "Someone copied."
# --- These will be set using MLE; here are sample values for comprehension purposes only
# priorCopy - prior on copying
priorCopy <- .15
# errorRate - If you are trying to copy, how likely is it that you make a mistake and choose a different piece?
errorRate <- .03
# nChoices - for model that ignores number of options (for rod/handles pieces), how many options does it assume were available?
nChoices <- 10
ModelBase = function(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate){
# RodIsDiff and HandleIsDiff are logicals (0/1, or T/F)
likelihoodIfCopyingHandleOnly <- ((RodIsDiff)     * ((NumRodChoices-1)/NumRodChoices) + # if rod is different
(1-RodIsDiff)   * (1/NumRodChoices)) *             # if rod is the same
((HandleIsDiff)  * errorRate +                   # if handle is different
(1-HandleIsDiff)* (1-errorRate))                # if handle is the same
likelihoodIfCopyingRodOnly <-   ((RodIsDiff)      * errorRate +
(1-RodIsDiff)    * (1-errorRate)) *
((HandleIsDiff)   * ((NumHandleChoices-1)/NumHandleChoices) +
(1-HandleIsDiff) * (1/NumHandleChoices))
likelihoodIfCopyingAll <-       ((RodIsDiff)      * errorRate +
(1-RodIsDiff)    * (1-errorRate)) *
((HandleIsDiff)   * errorRate +
(1-HandleIsDiff) * (1-errorRate))
likelihoodIfNoCopying <-        ((RodIsDiff)      * ((NumRodChoices-1)/NumRodChoices) +
(1-RodIsDiff)    * (1/NumRodChoices)) *
((HandleIsDiff)   * ((NumHandleChoices-1)/NumHandleChoices) +
(1-HandleIsDiff) * (1/NumHandleChoices))
# priors here are specified as rod, then handle
AdjustedLikelihoodIfCopyingAll        <- priorCopy     * priorCopy     * likelihoodIfCopyingAll
AdjustedLikelihoodIfCopyingHandleOnly <- (1-priorCopy) * priorCopy     * likelihoodIfCopyingHandleOnly
AdjustedLikelihoodIfCopyingRodOnly    <- priorCopy     * (1-priorCopy) * likelihoodIfCopyingRodOnly
AdjustedLikelihoodIfNoCopying         <- (1-priorCopy) * (1-priorCopy) * likelihoodIfNoCopying
SumAdjustedLikeCopy <- AdjustedLikelihoodIfCopyingAll +
AdjustedLikelihoodIfCopyingHandleOnly +
AdjustedLikelihoodIfCopyingRodOnly
PosteriorCopying <- SumAdjustedLikeCopy / (AdjustedLikelihoodIfNoCopying + SumAdjustedLikeCopy)
PosteriorNoCopying <- AdjustedLikelihoodIfNoCopying / (AdjustedLikelihoodIfNoCopying + SumAdjustedLikeCopy)
if(Response == "Someone copied."){
return(PosteriorCopying)
} else {
return(PosteriorNoCopying)
}
}
ModelFull = function(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate){
# Take into account the physical constraints of the box: For StarBox, there's only 1 rod option that works. (All handle options always work, on both boxes. For circle box, all rod options work.)
if(Box == 'Star'){
NumRodChoices <- 1
}
ModelBase(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate)
}
ModelISC = function(Box, HandleSimilarity, RodSimilarity, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate){
# Note that in contrast to the full model, this model does not adjust the value of NumRodChoices to take into account the StarBox constraint.
ModelBase(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate)
}
ModelIgnoresNumChoices = function(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate, nChoices){
# Instead of taking into account the actual number of options, use a value that does not change/ is not sensitive to actual number of options (nChoice)
if(Box == 'Star'){
NumRodChoices <- nChoices
NumHandleChoices <- nChoices
}
ModelBase(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate)
}
posteriorFullModel <- ModelFull(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate)
posteriorFullModel
posteriorISCModel <- ModelISC(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate)
posteriorISCModel
posteriorIgnoresNumChoicesModel <- ModelIgnoresNumChoices(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate, nChoices)
posteriorIgnoresNumChoicesModel
library(tidyverse)
# --- Parameters: ---
# --- Trial information:
# Box - which puzzle box (Star, Circle)
Box <- 'Star'
# HandleIsDiff - 0 = handles are identical; 1 = handles are different
HandleIsDiff <- 0
# RodIsDiff - 0 = rods are identical; 1 = rods are different
RodIsDiff <- 0
# NumRodChoices - 2 or 10 options to choose from
NumRodChoices <- 10
# NumHandleChoices - 2 or 10 options to choose from
NumHandleChoices <- 10
# Response (someone copied; or made independently, without copying)
Response <- "Someone copied."
# --- These will be set using MLE; here are sample values for comprehension purposes only
# priorCopy - prior on copying
priorCopy <- .15
# errorRate - If you are trying to copy, how likely is it that you make a mistake and choose a different piece?
errorRate <- .03
# nChoices - for model that ignores number of options (for rod/handles pieces), how many options does it assume were available?
nChoices <- 10
ModelBase = function(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate){
# RodIsDiff and HandleIsDiff are logicals (0/1, or T/F)
likelihoodIfCopyingHandleOnly <- ((RodIsDiff)     * ((NumRodChoices-1)/NumRodChoices) + # if rod is different
(1-RodIsDiff)   * (1/NumRodChoices)) *             # if rod is the same
((HandleIsDiff)  * errorRate +                   # if handle is different
(1-HandleIsDiff)* (1-errorRate))                # if handle is the same
likelihoodIfCopyingRodOnly <-   ((RodIsDiff)      * errorRate +
(1-RodIsDiff)    * (1-errorRate)) *
((HandleIsDiff)   * ((NumHandleChoices-1)/NumHandleChoices) +
(1-HandleIsDiff) * (1/NumHandleChoices))
likelihoodIfCopyingAll <-       ((RodIsDiff)      * errorRate +
(1-RodIsDiff)    * (1-errorRate)) *
((HandleIsDiff)   * errorRate +
(1-HandleIsDiff) * (1-errorRate))
likelihoodIfNoCopying <-        ((RodIsDiff)      * ((NumRodChoices-1)/NumRodChoices) +
(1-RodIsDiff)    * (1/NumRodChoices)) *
((HandleIsDiff)   * ((NumHandleChoices-1)/NumHandleChoices) +
(1-HandleIsDiff) * (1/NumHandleChoices))
# priors here are specified as rod, then handle
AdjustedLikelihoodIfCopyingAll        <- priorCopy     * priorCopy     * likelihoodIfCopyingAll
AdjustedLikelihoodIfCopyingHandleOnly <- (1-priorCopy) * priorCopy     * likelihoodIfCopyingHandleOnly
AdjustedLikelihoodIfCopyingRodOnly    <- priorCopy     * (1-priorCopy) * likelihoodIfCopyingRodOnly
AdjustedLikelihoodIfNoCopying         <- (1-priorCopy) * (1-priorCopy) * likelihoodIfNoCopying
SumAdjustedLikeCopy <- AdjustedLikelihoodIfCopyingAll +
AdjustedLikelihoodIfCopyingHandleOnly +
AdjustedLikelihoodIfCopyingRodOnly
PosteriorCopying <- SumAdjustedLikeCopy / (AdjustedLikelihoodIfNoCopying + SumAdjustedLikeCopy)
PosteriorNoCopying <- AdjustedLikelihoodIfNoCopying / (AdjustedLikelihoodIfNoCopying + SumAdjustedLikeCopy)
if(Response == "Someone copied."){
return(PosteriorCopying)
} else {
return(PosteriorNoCopying)
}
}
ModelFull = function(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate){
# Take into account the physical constraints of the box: For StarBox, there's only 1 rod option that works. (All handle options always work, on both boxes. For circle box, all rod options work.)
if(Box == 'Star'){
NumRodChoices <- 1
}
ModelBase(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate)
}
ModelFull = function(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate){
# Take into account the physical constraints of the box: For StarBox, there's only 1 rod option that works. (All handle options always work, on both boxes. For circle box, all rod options work.)
if(Box == 'Star'){
NumRodChoices <- 1
}
ModelBase(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate)
}
ModelISC = function(Box, HandleSimilarity, RodSimilarity, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate){
# Note that in contrast to the full model, this model does not adjust the value of NumRodChoices to take into account the StarBox constraint.
ModelBase(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate)
}
ModelIgnoresNumChoices = function(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate, nChoices){
# Instead of taking into account the actual number of options, use a value that does not change/ is not sensitive to actual number of options (nChoice)
if(Box == 'Star'){
NumRodChoices <- nChoices
NumHandleChoices <- nChoices
}
ModelBase(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate)
}
posteriorFullModel <- ModelFull(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate)
posteriorFullModel
posteriorISCModel <- ModelISC(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate)
posteriorISCModel
posteriorIgnoresNumChoicesModel <- ModelIgnoresNumChoices(Box, HandleIsDiff, RodIsDiff, NumHandleChoices, NumRodChoices, priorCopy, Response, errorRate, nChoices)
posteriorIgnoresNumChoicesModel
