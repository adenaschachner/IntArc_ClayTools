library(stats4)
library(papaja)
library(ggpmisc)
install.packages("ggpmisc")
library(ggpubr)
install.packages("ggpubr")
library(pbapply)
install.packages("pbapply")
library(tidyverse)
library(stats4)
library(papaja)
library(ggpmisc)
library(ggpubr)
library(pbapply)
dat <- read.csv("/Users/ethan/Downloads/IntArch_TestData.csv", stringsAsFactors = F)
dat <- read.csv("IntArch_TestData.csv", stringsAsFactors = F)
length(dat)
summary(dat)
summarize(dat)
View(dat)
dim(dat)
gsub?
?gsub
dat2 <- dat[-(1:2),-(1:18)]
View(dat2)
dat <- dat[-(1:2),-(1:18)]
dat.copy <- dat %>%
select(-c(grep("Ha", names(dat)), grep("Ro", names(dat)), grep("Bo", names(dat)), ends_with(match = "H", vars = names(dat)), ends_with(match = "R", vars = names(dat)), ends_with(match = "B", vars = names(dat)))) %>%
select(1:24)
View(dat.copy)
# make the column names more meaningful
names(dat) <- gsub("HId", "Iden", names(dat))
names(dat) <- gsub("RId", "Iden", names(dat))
names(dat) <- gsub("HDi", "Dif", names(dat))
names(dat) <- gsub("RDi", "Dif", names(dat))
names(dat) <- gsub("[.]", ",", names(dat))
# ethan can you add a comment to help me understand this line?
dat.copy <- dat %>%
select(-c(grep("Ha", names(dat)), grep("Ro", names(dat)), grep("Bo", names(dat)), ends_with(match = "H", vars = names(dat)), ends_with(match = "R", vars = names(dat)), ends_with(match = "B", vars = names(dat)))) %>%
select(1:24)
dat.copy <- cbind(PID = 1:nrow(dat.copy), dat.copy)
dat.copy2 = dat.copy %>%
gather(condition, Result,-PID) %>%
separate(condition, c('Box', 'HandleSimilarity', 'RodSimilarity', 'HandleChoices', 'RodChoices'),',') %>%
mutate(HandleChoices = as.numeric(HandleChoices),
RodChoices = as.numeric(RodChoices)) %>%
filter(Result != "")
dim(dat.copy2)
header(dat.copy2)
head(data.copy2)
head(dat.copy2)
head(dat.copy2)
?type
typeof(dat.copy2)
typeof(dat.copy2$RodSimilarity)
as.factor(dat.copy2$RodSimilarity)
dat.copy2$RodSimilarity <- as.factor(dat.copy2$RodSimilarity)
head(dat.copy2)
typeof(dat.copy2$HandleChoices)
typeof(dat.copy2$RodSimilarity)
dat.copy2$RodSimilarity == dif
dat.copy2$RodSimilarity
dat.copy2$RodSimilarity == "Dif"
9/10
1* ()
```{r setup, include=FALSE, message=FALSE}
library(tidyverse)
library(stats4)
library(papaja)
library(ggpmisc)
library(ggpubr)
library(pbapply)
dat <- read.csv("IntArch_TestData.csv", stringsAsFactors = F)
#Filter out data to be excluded:
# #Memory check questions:
# ##Star box
#
# dat %>%
#   filter(MemCheck_RodStar == "Star rod") %>%
#   filter(MemCheck_RodCir == "All of the rod pieces") %>%
#   filter(MemCheck_HanCir == "All of the handle pieces") %>%
#   filter(MemCheck_HanStar == "All of the handle pieces")
#
# #Score the lextale
# dat %>%
#   mutate(score = (((apply(dat %>%
#   select(ends_with(match = "_Y")), 1, function(x) sum(x=="Yes, this is English")))/20*100) + ((apply(dat %>%
#   select(ends_with(match = "_N")), 1, function(x) sum(x=="No, this is not English")))/10*100))/2)
#
# ##Completion time
# dat$`timing_Page,Submit` <- as.numeric(as.character(dat$`timing_Page,Submit`))
#
# mean(as.numeric(as.character(dat$`timing_Page,Submit`)))
# sd(as.numeric(as.character(dat$`timing_Page,Submit`)))*2
#
# dat %>%
#   filter(`timing_Page,Submit` <= (mean(dat$`timing_Page,Submit`) + sd(dat$`timing_Page,Submit`)))
# remove extra qualtrics headers, and columns that are non-data (dates, times, etc)
dat <- dat[-(1:2),-(1:18)]
# make the column names more meaningful
names(dat) <- gsub("HId", "Iden", names(dat))
names(dat) <- gsub("RId", "Iden", names(dat))
names(dat) <- gsub("HDi", "Dif", names(dat))
names(dat) <- gsub("RDi", "Dif", names(dat))
names(dat) <- gsub("[.]", ",", names(dat))
# ethan can you add a comment to help me understand this line?
dat.copy <- dat %>%
select(-c(grep("Ha", names(dat)), grep("Ro", names(dat)), grep("Bo", names(dat)), ends_with(match = "H", vars = names(dat)), ends_with(match = "R", vars = names(dat)), ends_with(match = "B", vars = names(dat)))) %>%
select(1:24)
dat.copy <- cbind(PID = 1:nrow(dat.copy), dat.copy)
dat.copy2 = dat.copy %>%
gather(condition, Result,-PID) %>%
separate(condition, c('Box', 'HandleSimilarity', 'RodSimilarity', 'HandleChoices', 'RodChoices'),',') %>%
mutate(HandleChoices = as.numeric(HandleChoices),
RodChoices = as.numeric(RodChoices),
Box <- as.factor(Box)) %>%
filter(Result != "")
dat.copy2$HandleSimilarity
s.factor(dat.copy2$HandleSimilarity)
as.factor(dat.copy2$HandleSimilarity)
dat.copy2$HandleSimilarity == Iden
dat.copy2$HandleSimilarity == 'Iden'
dat.copy2$HandleSimilarity <- dat.copy2$HandleSimilarity == 'Iden'
dat.copy2$HandleSimilarity
typeof(dat.copy2$HandleSimilarity)
dat.copy2$Result
```{r tidy the data}
dat.copy2 <- dat.copy %>%
gather(condition, Result,-PID) %>%
separate(condition, c('Box', 'HandleSimilarity', 'RodSimilarity', 'HandleChoices', 'RodChoices'),',') %>%
mutate(HandleChoices <- as.numeric(HandleChoices),
RodChoices <- as.numeric(RodChoices),
Box <- as.factor(Box),
HandleSimilarity <- HandleSimilarity == 'Iden',
RodSimilarity <- dat.copy2$RodSimilarity == 'Iden') %>%
filter(Result != "")
dat.copy2 <- dat.copy %>%
gather(condition, Result,-PID) %>%
separate(condition, c('Box', 'HandleSimilarity', 'RodSimilarity', 'HandleChoices', 'RodChoices'),',') %>%
mutate(HandleChoices <- as.numeric(HandleChoices),
RodChoices <- as.numeric(RodChoices),
Box <- as.factor(Box),
HandleSimilarity <- HandleSimilarity == 'Iden',
RodSimilarity <- RodSimilarity == 'Iden') %>%
filter(Result != "")
?mutate
dat.copy2 <- dat.copy %>%
gather(condition, Result,-PID) %>%
separate(condition, c('Box', 'HandleSimilarity', 'RodSimilarity', 'HandleChoices', 'RodChoices'),',') %>%
mutate(HandleChoices <- as.numeric(HandleChoices),
RodChoices <- as.numeric(RodChoices),
Box <- as.factor(Box),
HandleSimilarity <- HandleSimilarity == 'Iden',
RodSimilarity <- RodSimilarity == 'Iden',
JudgedCopied <- Result == 'Someone copied.') %>%
filter(Result != "")
head(dat.copy2)
dat.copy2 <- dat.copy %>%
gather(condition, Result,-PID) %>%
separate(condition, c('Box', 'HandleSimilarity', 'RodSimilarity', 'HandleChoices', 'RodChoices'),',') %>%
mutate(HandleChoices = as.numeric(HandleChoices),
RodChoices = as.numeric(RodChoices),
Box = as.factor(Box),
HandleSimilarity = HandleSimilarity == 'Iden',
RodSimilarity = RodSimilarity == 'Iden',
JudgedCopied = Result == 'Someone copied.') %>%
filter(Result != "")
head(dat.copy2)
library(tidyverse)
library(stats4)
library(papaja)
library(ggpmisc)
library(ggpubr)
library(pbapply)
dat <- read.csv("IntArch_TestData.csv", stringsAsFactors = F)
#Filter out data to be excluded:
# #Memory check questions:
# ##Star box
#
# dat %>%
#   filter(MemCheck_RodStar == "Star rod") %>%
#   filter(MemCheck_RodCir == "All of the rod pieces") %>%
#   filter(MemCheck_HanCir == "All of the handle pieces") %>%
#   filter(MemCheck_HanStar == "All of the handle pieces")
#
# #Score the lextale
# dat %>%
#   mutate(score = (((apply(dat %>%
#   select(ends_with(match = "_Y")), 1, function(x) sum(x=="Yes, this is English")))/20*100) + ((apply(dat %>%
#   select(ends_with(match = "_N")), 1, function(x) sum(x=="No, this is not English")))/10*100))/2)
#
# ##Completion time
# dat$`timing_Page,Submit` <- as.numeric(as.character(dat$`timing_Page,Submit`))
#
# mean(as.numeric(as.character(dat$`timing_Page,Submit`)))
# sd(as.numeric(as.character(dat$`timing_Page,Submit`)))*2
#
# dat %>%
#   filter(`timing_Page,Submit` <= (mean(dat$`timing_Page,Submit`) + sd(dat$`timing_Page,Submit`)))
# remove extra qualtrics headers, and columns that are non-data (dates, times, etc)
dat <- dat[-(1:2),-(1:18)]
# make the column names more meaningful
names(dat) <- gsub("HId", "Iden", names(dat))
names(dat) <- gsub("RId", "Iden", names(dat))
names(dat) <- gsub("HDi", "Dif", names(dat))
names(dat) <- gsub("RDi", "Dif", names(dat))
names(dat) <- gsub("[.]", ",", names(dat))
# removes the memory check questions from the dataset
dat.copy <- dat %>%
select(-c(grep("Ha", names(dat)), grep("Ro", names(dat)), grep("Bo", names(dat)), ends_with(match = "H", vars = names(dat)), ends_with(match = "R", vars = names(dat)), ends_with(match = "B", vars = names(dat)))) %>%
select(1:24)
dat.copy <- cbind(PID = 1:nrow(dat.copy), dat.copy)
dat.copy2 <- dat.copy %>%
gather(condition, Result,-PID) %>%
separate(condition, c('Box', 'HandleSimilarity', 'RodSimilarity', 'HandleChoices', 'RodChoices'),',') %>%
mutate(HandleChoices = as.numeric(HandleChoices),
RodChoices = as.numeric(RodChoices),
Box = as.factor(Box),
HandleSimilarity = HandleSimilarity == 'Iden',
RodSimilarity = RodSimilarity == 'Iden',
JudgedCopied = Result == 'Someone copied.') %>%
filter(Result != "")
model.full = function(Box, HandleSimilarity, RodSimilarity, HandleChoices, RodChoices, priorCopy, Response){
# Take into account the physical constraints of the box - for StarBox, there's only 1 option that works.
if(Box == 'Star'){
RodChoices <- 1
}
# Error parameter: If you are trying to copy, how likely is it that you make a mistake and choose a different piece?
# TO DO: how to set this param? MLE too?
errorRate <- .03
# in this scheme, RodIsDiff and HandleIsDiff are logicals (0/1, or T/F)
likelihoodIfCopyingHandleOnly <- ((RodIsDiff)     * ((RodChoices-1)/RodChoices) + # if rod is different
(1-RodIsDiff)   * (1/RodChoices)) *             # if rod is the same
((HandleIsDiff)  * errorRate +                   # if handle is different
(1-HandleIsDiff)* (1-errorRate))                # if handle is the same
likelihoodIfCopyingRodOnly <-   ((RodIsDiff)      * errorRate +
(1-RodIsDiff)    * (1-errorRate)) *
((HandleIsDiff)   * ((HandleChoices-1)/HandleChoices) +
(1-HandleIsDiff) * (1/HandleChoices))
likelihoodIfCopyingAll <-       ((RodIsDiff)      * errorRate +
(1-RodIsDiff)    * (1-errorRate)) *
((HandleIsDiff)   * errorRate +
(1-HandleIsDiff) * (1-errorRate))
likelihoodIfNoCopying <-        ((RodIsDiff)      * ((RodChoices-1)/RodChoices) +
(1-RodIsDiff)    * (1/RodChoices)) *
((HandleIsDiff)   * ((HandleChoices-1)/HandleChoices) +
(1-HandleIsDiff) * (1/HandleChoices))
# rod, then handle
# change dot notation to camel case
adjusted.likelihoodIfCopyingAll        <- priorCopy     * priorCopy     * likelihoodIfCopyingAll
adjusted.likelihoodIfCopyingHandleOnly <- (1-priorCopy) * priorCopy     * likelihoodIfCopyingHandleOnly
adjusted.likelihoodIfCopyingRodOnly    <- priorCopy     * (1-priorCopy) * likelihoodIfCopyingRodOnly
adjusted.likelihoodIfNoCopying         <- (1-priorCopy) * (1-priorCopy) * likelihoodIfNoCopying
sum.adjusted.likeCopy <- adjusted.likelihoodIfCopyingAll +
adjusted.likelihoodIfCopyingHandleOnly +
adjusted.likelihoodIfCopyingRodOnly
posterior.copying <- sum.adjusted.likeCopy          / (adjusted.likelihoodIfNoCopying + sum.adjusted.likeCopy)
posterior.indep   <- adjusted.likelihoodIfNoCopying / (adjusted.likelihoodIfNoCopying + sum.adjusted.likeCopy)
if(Response == "Someone copied."){
return(posterior.copying)
} else {
return(posterior.indep)
}
}
model.ISC = function(Box, HandleSimilarity, RodSimilarity, HandleChoices, RodChoices, priorCopy, Response){
if(HandleSimilarity == 'Dif' & RodSimilarity == 'Dif'){
likelihoodIfCopyingAll <- 0.00000000001
likelihoodIfCopyingHandleOnly <- 0.00000000001
likelihoodIfCopyingRodOnly <- 0.00000000001
likelihoodIndep <- ((RodChoices-1)/RodChoices) * ((HandleChoices-1)/HandleChoices)
} else if(HandleSimilarity == 'Dif' & RodSimilarity == 'Iden'){
likelihoodIfCopyingAll <- 0.00000000001
likelihoodIfCopyingHandleOnly <- 0.00000000001
likelihoodIfCopyingRodOnly <- 1 * ((HandleChoices-1)/HandleChoices)
likelihoodIndep <- (1/RodChoices) * ((HandleChoices-1)/HandleChoices)
} else if(HandleSimilarity == 'Iden' & RodSimilarity == 'Dif'){
likelihoodIfCopyingAll <- 0.00000000001
likelihoodIfCopyingHandleOnly <- ((RodChoices-1)/RodChoices) * 1
likelihoodIfCopyingRodOnly <- 0.00000000001
likelihoodIndep <- ((RodChoices-1)/RodChoices) * (1/HandleChoices)
} else if(HandleSimilarity == 'Iden' & RodSimilarity == 'Iden'){
likelihoodIfCopyingAll <- 1
likelihoodIfCopyingHandleOnly <- (1/RodChoices) * 1
likelihoodIfCopyingRodOnly <- 1 * (1/HandleChoices)
likelihoodIndep <- (1/RodChoices) * (1/HandleChoices)
}
adjusted.likelihoodIfCopyingAll <- priorCopy * priorCopy * likelihoodIfCopyingAll
adjusted.likelihoodIfCopyingHandleOnly <- (1 - priorCopy) * priorCopy * likelihoodIfCopyingHandleOnly
adjusted.likelihoodIfCopyingRodOnly <- priorCopy * (1 - priorCopy) * likelihoodIfCopyingRodOnly
adjusted.likelihoodIndep <- (1 - priorCopy) * (1 - priorCopy) * likelihoodIndep
sum.adjusted.likeCopy <- adjusted.likelihoodIfCopyingAll + adjusted.likelihoodIfCopyingHandleOnly + adjusted.likelihoodIfCopyingRodOnly
posterior.copying <- sum.adjusted.likeCopy / (adjusted.likelihoodIndep + sum.adjusted.likeCopy)
posterior.indep <- adjusted.likelihoodIndep / (adjusted.likelihoodIndep + sum.adjusted.likeCopy)
if(Response == "Someone copied."){
return(posterior.copying)
} else {
return(posterior.indep)
}
}
copy.llh.full = function(priorCopy){
tempData = dat.copy2 %>%
rowwise() %>%
mutate(pred = model.full(Box, HandleSimilarity, RodSimilarity, HandleChoices, RodChoices, priorCopy, Result))
-sum(log(tempData$pred))
}
#cannot use 0 and 1 because it will result in (NaN)
lwrs.full = c(0.000000001)
uprs.full = c(0.999999999)
inits.full = list(priorCopy = mean(dat.copy2$Result == "Someone copied."))
fit.full <- mle(copy.llh.full, start = inits.full, lower = lwrs.full, upper = uprs.full, method = 'L-BFGS-B')
head(data.copy2$HandleSimilarity)
head(dat.copy2$HandleSimilarity)
head(dat$HandleSimilarity)
